{"version":3,"sources":["webpack:///./webgl-library/ObjFile.js","webpack:///./demos/bunny/app.js"],"names":[],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;;AAGb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gE;;;;;;;;;;;;;ACtHA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E","file":"bunny.js","sourcesContent":["'use strict';\r\n\r\nimport Matrix from './Matrix';\r\n\r\nclass ObjFile {\r\n    /**\r\n     *\r\n     * @param {string} text obj file content\r\n     */\r\n    constructor(text) {\r\n        let lines = text.split('\\n');\r\n        this._vertices = [];\r\n        this._triangles = [];\r\n\r\n        lines.forEach(line => {\r\n            let tokens = line.split(' ');\r\n            if (tokens.length != 4)\r\n                return;\r\n\r\n            switch (tokens[0]) {\r\n                case 'v':\r\n                    let x = parseFloat(tokens[1]);\r\n                    let y = parseFloat(tokens[2]);\r\n                    let z = parseFloat(tokens[3]);\r\n\r\n                    this._vertices.push([x, y, z]);\r\n                    break;\r\n\r\n                case 'f':\r\n                    let a = parseInt(tokens[1]) - 1;\r\n                    let b = parseInt(tokens[2]) - 1;\r\n                    let c = parseInt(tokens[3]) - 1;\r\n\r\n                    this._triangles.push([a, b, c]);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns {Array<Matrix>}\r\n     */\r\n    getNormalsArray() {\r\n        let verticesTriangles = new Array(this._vertices.length);\r\n        let result = [];\r\n\r\n        this._triangles.forEach((triangle, tIndex) =>\r\n            triangle.forEach(vIndex => {\r\n                if (verticesTriangles[vIndex] === undefined)\r\n                    verticesTriangles[vIndex] = [];\r\n\r\n                verticesTriangles[vIndex].push(tIndex);\r\n            }));\r\n\r\n\r\n        verticesTriangles.forEach(triangles => {\r\n            let normal = Matrix.vector([0, 0, 0]);\r\n\r\n            triangles.forEach(tIndex => {\r\n                let triangle = this._triangles[tIndex];\r\n\r\n                let a = Matrix.vector(this._vertices[triangle[0]]);\r\n                let b = Matrix.vector(this._vertices[triangle[1]]);\r\n                let c = Matrix.vector(this._vertices[triangle[2]]);\r\n\r\n                let cross = b.sub(a).cross(c.sub(a));\r\n                normal = cross.mult(1 / cross.length()).add(normal);\r\n            });\r\n\r\n            normal = normal.mult(1 / normal.length());\r\n            result.push(normal);\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @returns {Array<Matrix>}\r\n     */\r\n    getVerticesArray() {\r\n        return this._vertices.map(v => Matrix.vector(v));\r\n    }\r\n\r\n    /**\r\n     * @returns {Array<number>}\r\n     */\r\n    getTrianglesArray() {\r\n        let result = [];\r\n        this._triangles.forEach(face => result = result.concat(face));\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @returns {Array<number>}\r\n     */\r\n    getLinesArray() {\r\n        let result = [];\r\n        this._triangles.forEach(face => {\r\n            result.push(face[0]);\r\n            result.push(face[1]);\r\n\r\n            result.push(face[1]);\r\n            result.push(face[2]);\r\n\r\n            result.push(face[2]);\r\n            result.push(face[0]);\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    static loadAsync(url) {\r\n        return fetch(url)\r\n            .then(response => response.text())\r\n            .then(text => new ObjFile(text));\r\n    }\r\n}\r\n\r\nexport default ObjFile;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./webgl-library/ObjFile.js\n// module id = 4\n// module chunks = 1","'use strict';\r\n\r\nimport Context from '../../webgl-library/Context';\r\nimport Matrix from '../../webgl-library/Matrix';\r\nimport Quaternion from '../../webgl-library/Quaternion';\r\nimport ObjFile from '../../webgl-library/ObjFile';\r\n\r\nlet canvas = document.getElementById('glcanvas');\r\nlet ctx = new Context(canvas);\r\n\r\nlet objPromise = ObjFile.loadAsync('./obj/bunny.obj');\r\nlet vertexShaderPromise = ctx.createShader('./shaders/vertex.glsl', ctx.gl.VERTEX_SHADER);\r\nlet fragmentShaderPromise = ctx.createShader('./shaders/fragment.glsl', ctx.gl.FRAGMENT_SHADER);\r\nlet programPromise = ctx.createProgram([vertexShaderPromise, fragmentShaderPromise]);\r\n\r\nPromise.all([objPromise, programPromise]).then(results => {\r\n    let objFile = results[0];\r\n    let program = results[1];\r\n\r\n    const gl = ctx.gl;\r\n    gl.enable(gl.CULL_FACE);\r\n    let mesh = ctx.createMesh(program);\r\n\r\n    mesh.loadAttribute3f('aPosition', objFile.getVerticesArray().reduce((r, v) => r.concat([v.getValue(0), v.getValue(1), v.getValue(2)]), []));\r\n    mesh.loadAttribute3f('aNormal', objFile.getNormalsArray().reduce((r, v) => r.concat([v.getValue(0), v.getValue(1), v.getValue(2)]), []));\r\n\r\n    mesh.setBufferData({\r\n        bufferName: 'triangles',\r\n        target: gl.ELEMENT_ARRAY_BUFFER,\r\n        data: new Uint16Array(objFile.getTrianglesArray()),\r\n        usage: gl.STATIC_DRAW,\r\n        dataType: gl.UNSIGNED_SHORT,\r\n        mode: gl.TRIANGLES\r\n    });\r\n\r\n    mesh.setBufferData({\r\n        bufferName: 'lines',\r\n        target: gl.ELEMENT_ARRAY_BUFFER,\r\n        data: new Uint16Array(objFile.getLinesArray()),\r\n        usage: gl.STATIC_DRAW,\r\n        dataType: gl.UNSIGNED_SHORT,\r\n        mode: gl.LINES\r\n    });\r\n\r\n    const perspective = Matrix.perspective(60, canvas.width / canvas.height, 0.001, 100.0);\r\n    mesh.setUniformMatrix('uProjection', perspective);\r\n    return mesh;\r\n}).then(mesh => {\r\n    const gl = ctx.gl;\r\n    let translate = Matrix.vector([0, 0, -0.25]);\r\n    let rotation = Quaternion.rotateRadians(Matrix.vector([0, 0, 0]), 0);\r\n    render();\r\n\r\n    canvas.addEventListener('mousemove', function (event) {\r\n        const leftMouseButton = event.buttons & 1;\r\n        if (!leftMouseButton) return;\r\n\r\n        rotation = Quaternion.rotateDegrees(Matrix.vector([1, 0, 0]), event.clientY)\r\n            .mult(Quaternion.rotateDegrees(Matrix.vector([0, 1, 0]), event.clientX * 0.75));\r\n\r\n        render();\r\n    });\r\n\r\n    canvas.addEventListener('wheel', function (event) {\r\n        if (event.deltaY === 0) return;\r\n\r\n        if (event.deltaY > 0)\r\n            translate.setValue(2, translate.getValue(2) * 1.05);\r\n        else\r\n            translate.setValue(2, translate.getValue(2) / 1.05);\r\n\r\n        render();\r\n    });\r\n\r\n    function render() {\r\n        mesh.setUniformMatrix('uModel', Matrix.translate(Matrix.vector([0, -0.075, 0])));\r\n        mesh.setUniformMatrix('uView', Matrix.translate(translate).mult(rotation.toMatrix()));\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        mesh.render('triangles');\r\n        //mesh.render('lines');\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./demos/bunny/app.js\n// module id = 8\n// module chunks = 1"],"sourceRoot":""}