{"version":3,"sources":["webpack:///./demos/surface/lattice.js","webpack:///./demos/surface/app.js"],"names":[],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA,eAAe,SAAS;AACxB;AACA;AACA,uBAAuB,iBAAiB;AACxC,2BAA2B,kBAAkB;AAC7C;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA,gE;;;;;;;;;;;;;AC3HA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA,CAAC;AACD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;;AAGA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC,E","file":"surface.js","sourcesContent":["'use strict';\r\n\r\nimport Matrix from '../../webgl-library/Matrix';\r\n\r\nclass Lattice {\r\n    /**\r\n     * @param {number} width\r\n     * @param {number} height\r\n     */\r\n    constructor(width, height) {\r\n        this._width = width;\r\n        this._height = height;\r\n\r\n        const length = width * height;\r\n        this._data = new Array(length);\r\n        for (let i = 0; i < length; ++i)\r\n            this._data[i] = Matrix.vector([0, 0, 0]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} i\r\n     * @param {number} j\r\n     * @return {Matrix}\r\n     */\r\n    get(i, j) {\r\n        if (i >= this._width || j >= this._height)\r\n            throw new RangeError();\r\n\r\n        const index = j * this._width + i;\r\n        return this._data[index];\r\n    }\r\n\r\n    /**\r\n     * @return {number}\r\n     */\r\n    get width() {\r\n        return this._width;\r\n    }\r\n\r\n    /**\r\n     * @return {number}\r\n     */\r\n    get height() {\r\n        return this._height;\r\n    }\r\n\r\n    /**\r\n     * @return {number}\r\n     */\r\n    get count() {\r\n        return this._width * this._height;\r\n    }\r\n\r\n    /**\r\n     * @param {function} callback\r\n     */\r\n    forEach(callback) {\r\n        for (let i = 0; i < this._width; ++i)\r\n            for (let j = 0; j < this._height; ++j)\r\n                callback(i, j);\r\n    }\r\n\r\n    /**\r\n     * @return {Array<number>}\r\n     */\r\n    verticesArray() {\r\n        let result = new Array(this.width * this.height * 3);\r\n        let index = 0;\r\n        this._data.forEach(v => {\r\n            result[index++] = v.getValue(0);\r\n            result[index++] = v.getValue(1);\r\n            result[index++] = v.getValue(2);\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @return {Uint16Array<number>}\r\n     */\r\n    trianglesArray() {\r\n        let result = [];\r\n\r\n        this.forEach((i, j) => {\r\n            if (i === 0 || j === 0) return;\r\n\r\n            const current = this.width * j + i;\r\n            const top = this.width * (j - 1) + i;\r\n            const left = this.width * j + i - 1;\r\n            const topLeft = this.width * (j - 1) + i - 1;\r\n\r\n            result.push(current, top, topLeft);\r\n            result.push(current, topLeft, left);\r\n        });\r\n\r\n        return new Uint16Array(result);\r\n    }\r\n\r\n    /**\r\n     * @return {Uint16Array<number>}\r\n     */\r\n    linesArray() {\r\n        let result = [];\r\n\r\n        this.forEach((i, j) => {\r\n            if (i === 0 || j === 0) return;\r\n\r\n            const current = this.width * j + i;\r\n            const top = this.width * (j - 1) + i;\r\n            const left = this.width * j + i - 1;\r\n            const topLeft = this.width * (j - 1) + i - 1;\r\n\r\n            result.push(current, top);\r\n            result.push(top, topLeft);\r\n            result.push(topLeft, left);\r\n            result.push(left, current);\r\n        });\r\n\r\n        return new Uint16Array(result);\r\n    }\r\n}\r\n\r\nexport default Lattice;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./demos/surface/lattice.js\n// module id = 3\n// module chunks = 0","'use strict';\r\n\r\nimport Context from '../../webgl-library/Context';\r\nimport Matrix from '../../webgl-library/Matrix';\r\nimport Quaternion from '../../webgl-library/Quaternion';\r\n\r\nimport Lattice from './lattice';\r\n\r\nlet canvas = document.getElementById('glcanvas');\r\nlet ctx = new Context(canvas);\r\n\r\nlet vertexShaderPromise = ctx.createShader('./shaders/vertex.glsl', ctx.gl.VERTEX_SHADER);\r\nlet fragmentShaderPromise = ctx.createShader('./shaders/fragment.glsl', ctx.gl.FRAGMENT_SHADER);\r\n\r\n\r\nctx.createProgram([vertexShaderPromise, fragmentShaderPromise]).then(program => {\r\n    let lattice = new Lattice(51, 51);\r\n    lattice.forEach((i, j) => {\r\n        let v = lattice.get(i, j);\r\n        let x = (i - 25) * 0.04;\r\n        let y = (j - 25) * 0.04;\r\n        v.setValue(0, x);\r\n        v.setValue(1, y);\r\n    });\r\n\r\n    const gl = ctx.gl;\r\n    let mesh = ctx.createMesh(program);\r\n    mesh.loadAttribute3f('aPosition', lattice.verticesArray());\r\n    mesh.setBufferData({\r\n        bufferName: 'triangles',\r\n        target: gl.ELEMENT_ARRAY_BUFFER,\r\n        data: lattice.trianglesArray(),\r\n        usage: gl.STATIC_DRAW,\r\n        dataType: gl.UNSIGNED_SHORT,\r\n        mode: gl.TRIANGLES\r\n    });\r\n\r\n    mesh.setBufferData({\r\n        bufferName: 'lines',\r\n        target: gl.ELEMENT_ARRAY_BUFFER,\r\n        data: lattice.linesArray(),\r\n        usage: gl.STATIC_DRAW,\r\n        dataType: gl.UNSIGNED_SHORT,\r\n        mode: gl.LINES\r\n    });\r\n\r\n    const perspective = Matrix.perspective(60, canvas.width / canvas.height, 0.001, 100.0);\r\n    mesh.setUniformMatrix('uProjection', perspective);\r\n    return mesh;\r\n\r\n}).then(mesh => {\r\n    const gl = ctx.gl;\r\n    mesh.setUniformMatrix('uModel', Quaternion.rotateDegrees(Matrix.vector([1, 0, 0]), -90).toMatrix());\r\n\r\n    let translate = Matrix.vector([0, 0, -3]);\r\n    let rotation = Quaternion.rotateRadians(Matrix.vector([0, 0, 0]), 0);\r\n\r\n    canvas.addEventListener('mousemove', function (event) {\r\n        const leftMouseButton = event.buttons & 1;\r\n        if (!leftMouseButton) return;\r\n\r\n        rotation = Quaternion.rotateDegrees(Matrix.vector([1, 0, 0]), event.clientY)\r\n            .mult(Quaternion.rotateDegrees(Matrix.vector([0, 1, 0]), event.clientX * 0.75));\r\n\r\n        render();\r\n    });\r\n\r\n    canvas.addEventListener('wheel', function (event) {\r\n        if (event.deltaY === 0) return;\r\n\r\n        if (event.deltaY > 0)\r\n            translate.setValue(2, translate.getValue(2) * 1.05);\r\n        else\r\n            translate.setValue(2, translate.getValue(2) / 1.05);\r\n\r\n        render();\r\n    });\r\n\r\n    let triangles = true;\r\n\r\n\r\n    document.addEventListener('keypress', function (event) {\r\n        if (event.keyCode === 32)\r\n            triangles = !triangles;\r\n\r\n        render();\r\n    });\r\n\r\n    function render() {\r\n        mesh.setUniformMatrix('uView', Matrix.translate(translate).mult(rotation.toMatrix()));\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n        if (triangles)\r\n            mesh.render('triangles');\r\n        else\r\n            mesh.render('lines');\r\n    }\r\n\r\n    render();\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./demos/surface/app.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}